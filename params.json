{"name":"Spring-social-examples-thymeleaf","tagline":"Fork of pkainulainen / spring-social-examples with thymeleaf instead of jsp","body":"Thymeleaf fork of spring-social-examples from pkainulainen\r\n======================\r\n\r\nThis is a fork from [https://github.com/pkainulainen/spring-social-examples](https://github.com/pkainulainen/spring-social-examples \"https://github.com/pkainulainen/spring-social-examples\"). It is the source to the blog post \"Adding Social Sign In to a Spring MVC Web Application: Registration and Login\" from Petri Kainulainen (see at [http://www.petrikainulainen.net/programming/spring-framework/adding-social-sign-in-to-a-spring-mvc-web-application-registration-and-login/](http://www.petrikainulainen.net/programming/spring-framework/adding-social-sign-in-to-a-spring-mvc-web-application-registration-and-login/ \"http://www.petrikainulainen.net/programming/spring-framework/adding-social-sign-in-to-a-spring-mvc-web-application-registration-and-login/\")).\r\n\r\nThe application use JSP (Java Server Pages). Now, I replace jsp with thymeleaf in my fork.\r\n\r\nIt is easy to use thymeleaf instead of jsp. Look on the source.\r\n\r\nPlease tell me if you find a failure or a better way.\r\n\r\nAt the following you can see a part of differences between jsp and thymeleaf. The complete differences you can see at the source files.\r\n\r\n## Differences between jsp and thymeleaf ##\r\n\r\n**Setup**\r\n\r\nJSP:\r\n\r\n    private static final String VIEW_RESOLVER_PREFIX = \"/WEB-INF/jsp/\";\r\n    private static final String VIEW_RESOLVER_SUFFIX = \".jsp\";\r\n\r\n    @Bean\r\n    public ViewResolver viewResolver() {\r\n    InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\r\n    \r\n    viewResolver.setViewClass(JstlView.class);\r\n    viewResolver.setPrefix(VIEW_RESOLVER_PREFIX);\r\n    viewResolver.setSuffix(VIEW_RESOLVER_SUFFIX);\r\n    \r\n    return viewResolver;\r\n    }\r\n\r\n\r\nThymeleaf (this is only a part):\r\n\r\n    @Bean\r\n    public ServletContextTemplateResolver templateResolverServlet() {\r\n    ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver();\r\n    templateResolver.setPrefix(\"/WEB-INF/html/\");\r\n    templateResolver.setSuffix(\".html\");\r\n    templateResolver.setTemplateMode(\"LEGACYHTML5\");\r\n    templateResolver.setOrder(2);\r\n    templateResolver.setCacheable(false);\r\n    return templateResolver;\r\n    }\r\n\r\nSee the rest on [https://github.com/lightszentip/spring-social-examples-thymeleaf/blob/master/sign-in/spring-mvc-normal/src/main/java/net/petrikainulainen/spring/social/signinmvc/config/ThymeleafView.java](https://github.com/lightszentip/spring-social-examples-thymeleaf/blob/master/sign-in/spring-mvc-normal/src/main/java/net/petrikainulainen/spring/social/signinmvc/config/ThymeleafView.java)\r\n\r\n\r\n**Layout**\r\n\r\nFor layout in thymeleaf, I have used [thymeleaf-layout-dialect](https://github.com/ultraq/thymeleaf-layout-dialect) instead sitemesh.\r\n\r\nJSP sitemesh layout:\r\n\r\n    <div id=\"view-holder\">\r\n    <sitemesh:write property=\"body\">\r\n    </div>\r\n\r\nThymeleaf layout:\r\n\r\n    <div id=\"view-holder\">\r\n    <div layout:fragment=\"body\" />\r\n    </div>\r\n\r\nand at the thymeleaf page\r\n\r\n    layout:fragment=\"body\"\r\n\r\n\r\n**isAuthenticated**\r\n\r\nJSP:\r\n\r\n    <sec:authorize access=\"isAuthenticated()\"\r\n\r\nThymeleaf:\r\n\r\n     <p sec:authorize=\"isAuthenticated()\" \r\n\r\n\r\n**Link**\r\n\r\nJSP:\r\n\r\n    <c:url value=\"/auth/twitter\"\r\n\r\nThymeleaf\r\n\r\n    th:href=\"@{/auth/facebook}\"\r\n\r\n**Username**\r\n\r\nJSP:\r\n\r\n     <sec:authentication property=\"principal.username\"/>\r\n\r\nThymeleaf:\r\n\r\n    <span sec:authentication=\"principal.username\"></span>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}